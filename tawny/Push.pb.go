// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Push.proto

package tawny

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeInput struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeInput) Reset()         { *m = SubscribeInput{} }
func (m *SubscribeInput) String() string { return proto.CompactTextString(m) }
func (*SubscribeInput) ProtoMessage()    {}
func (*SubscribeInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2606252a03b6035c, []int{0}
}

func (m *SubscribeInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeInput.Unmarshal(m, b)
}
func (m *SubscribeInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeInput.Marshal(b, m, deterministic)
}
func (m *SubscribeInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeInput.Merge(m, src)
}
func (m *SubscribeInput) XXX_Size() int {
	return xxx_messageInfo_SubscribeInput.Size(m)
}
func (m *SubscribeInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeInput.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeInput proto.InternalMessageInfo

func (m *SubscribeInput) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SubscribeInput) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type PushInput struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushInput) Reset()         { *m = PushInput{} }
func (m *PushInput) String() string { return proto.CompactTextString(m) }
func (*PushInput) ProtoMessage()    {}
func (*PushInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2606252a03b6035c, []int{1}
}

func (m *PushInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushInput.Unmarshal(m, b)
}
func (m *PushInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushInput.Marshal(b, m, deterministic)
}
func (m *PushInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushInput.Merge(m, src)
}
func (m *PushInput) XXX_Size() int {
	return xxx_messageInfo_PushInput.Size(m)
}
func (m *PushInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PushInput.DiscardUnknown(m)
}

var xxx_messageInfo_PushInput proto.InternalMessageInfo

func (m *PushInput) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PushInput) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushInput) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2606252a03b6035c, []int{2}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeInput)(nil), "tawny.SubscribeInput")
	proto.RegisterType((*PushInput)(nil), "tawny.PushInput")
	proto.RegisterType((*Message)(nil), "tawny.Message")
}

func init() {
	proto.RegisterFile("Push.proto", fileDescriptor_2606252a03b6035c)
}

var fileDescriptor_2606252a03b6035c = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0a, 0x28, 0x2d, 0xce,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x49, 0x2c, 0xcf, 0xab, 0x94, 0x92, 0x4e,
	0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x26, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94,
	0x54, 0x42, 0xd4, 0x28, 0x39, 0x70, 0xf1, 0x05, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x26, 0xa5,
	0x7a, 0xe6, 0x15, 0x94, 0x96, 0x08, 0x49, 0x70, 0xb1, 0x27, 0x67, 0x24, 0xe6, 0xe5, 0xa5, 0xe6,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x25, 0xf9, 0x05,
	0x99, 0xc9, 0x12, 0x4c, 0x60, 0x71, 0x08, 0x47, 0xc9, 0x9f, 0x8b, 0x13, 0x64, 0x27, 0x59, 0x9a,
	0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x98, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0,
	0x6c, 0x25, 0x59, 0x2e, 0x76, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xb8, 0x34, 0x23, 0x42,
	0xda, 0xa8, 0x86, 0x8b, 0x1b, 0x64, 0x5f, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x19,
	0x17, 0x27, 0xdc, 0x03, 0x42, 0xa2, 0x7a, 0x60, 0x2f, 0xeb, 0xa1, 0x7a, 0x49, 0x8a, 0x0f, 0x2a,
	0x0c, 0x35, 0x56, 0x89, 0xc1, 0x80, 0x51, 0xc8, 0x94, 0x8b, 0x3d, 0xa0, 0x34, 0x29, 0x27, 0xb3,
	0x38, 0x43, 0x48, 0x00, 0x2a, 0x0d, 0xf7, 0x86, 0x94, 0x98, 0x1e, 0x24, 0xcc, 0xf4, 0x60, 0x61,
	0xa6, 0xe7, 0x0a, 0x0a, 0x33, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x88, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x06, 0x58, 0xff, 0x33, 0x68, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushServiceClient interface {
	//* Subscribe to a channel/topic to receive Owl Message
	Subscribe(ctx context.Context, in *SubscribeInput, opts ...grpc.CallOption) (PushService_SubscribeClient, error)
	//* Subscribe to a channel/topic to receive Owl Message
	Publish(ctx context.Context, in *PushInput, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) Subscribe(ctx context.Context, in *SubscribeInput, opts ...grpc.CallOption) (PushService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushService_serviceDesc.Streams[0], "/tawny.PushService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pushServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *pushServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushServiceClient) Publish(ctx context.Context, in *PushInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tawny.PushService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
type PushServiceServer interface {
	//* Subscribe to a channel/topic to receive Owl Message
	Subscribe(*SubscribeInput, PushService_SubscribeServer) error
	//* Subscribe to a channel/topic to receive Owl Message
	Publish(context.Context, *PushInput) (*empty.Empty, error)
}

// UnimplementedPushServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (*UnimplementedPushServiceServer) Subscribe(req *SubscribeInput, srv PushService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedPushServiceServer) Publish(ctx context.Context, req *PushInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).Subscribe(m, &pushServiceSubscribeServer{stream})
}

type PushService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pushServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *pushServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _PushService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tawny.PushService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).Publish(ctx, req.(*PushInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tawny.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PushService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PushService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Push.proto",
}
